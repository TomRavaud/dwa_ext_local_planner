# Custom values for the parameters of the local planner
DWAExtPlannerROS:
  # x: direction parallel to robot's straight movement
  # y: direction perpendicular to robot's straight movement, useful for holonomic robots

  # Robot configuration parameters
  # Accelerations
  acc_lim_x: 3.0  # default 3.0 m/s^2
  acc_lim_y: 100.0  # must be >> 0 for non-holonomic robots in order to have max y vel = min y vel in the simple trajectory generator (because the y velocity given by the odometry topic is not exactly equal to zero)
  acc_lim_theta: 6.0  # default 6.0 rad/s^2

  # x linear velocity
  max_vel_x: 1  # default 1.0 m/s
  min_vel_x: 0.1

  # y linear velocity (should be set to zero for non-holonomic robots)
  max_vel_y: 0.0
  min_vel_y: 0.0

  # z angular velocity
  max_vel_theta: 0.5  # default 2.0 rad/s
  min_vel_theta: 0.0

  # Translational velocity (same as x velocity)
  max_vel_trans: 1.0  # Maximum speed in the direction of advance (max de sqrt(vel_x**2 + vel_y**2))
  min_vel_trans: 1.0

  # Goal Tolerance Parameters
  yaw_goal_tolerance: 0.1  # Angle in radians (default: 0.1)
  xy_goal_tolerance: 0.5  # (default: 0.2)
  latch_xy_goal_tolerance: false

  # Forward Simulation Parameters
  sim_time: 5.5  # Number of seconds to look forward
  sim_granularity: 0.2  # Time step used to discretize a trajectory

  # Velocities sampling
  vx_samples: 10
  vy_samples: 1
  vth_samples: 20

  penalize_negative_x: true

  # Trajectory scoring parameters
  path_distance_bias: 32.0  # The weighting for how much the controller should stay close to the path it was given
  # goal_distance_bias: 20.0  # The weighting for how much the controller should attempt to reach its local goal, also controls speed
  occdist_scale: 0.02  # The weighting for how much the controller should attempt to avoid obstacles
  # forward_point_distance: 0.325 # The distance from the center point of the robot to place an additional scoring point, in meters
  # stop_time_buffer: 0.2  # The amount of time that the robot must stThe absolute value of the velocity at which to start scaling the robot's footprint, in m/sop before a collision in order for a trajectory to be considered valid in seconds
  # scaling_speed: 0.25 # The absolute value of the velocity at which to start scaling the robot's footprint, in m/s
  # max_scaling_factor: 0.2 # The maximum factor to scale the robot's footprint by

  # Oscillation Prevention Parameters
  oscillation_reset_dist: 0.05 # How far the robot must travel in meters before oscillation flags are reset (double, default: 0.05)


  ############################################################
  ## Global parameters for the traversability cost function ##
  ############################################################

  # Traversal cost weight (should be > 0 for the traversal cost to be taken into account)
  traversability_bias: 0.5  # Weighting for how much the controller should attempt to minimize the traversal cost

  sim_granularity_t: 0.05  # Time step used to discretize a trajectory

  # Velocities sampling
  vx_samples_t: 2
  vy_samples_t: 1
  vth_samples_t: 6

  ##################################################
  ## Parameters of the traversal cost computation ##
  ##################################################

  Traversability:
    # Image topic to subscribe to
    # image_topic: "zed_node/rgb/image_rect_color"
    image_topic: "camera1/image_raw"

    # Odometry topic to subscribe to
    # odom_topic: "odometry/filtered/local"
    odom_topic: "odometry/filtered"


    # File containing the model definition
    model_definition_file: "/home/tom/Traversability-Tom/catkin_ws/src/dwa_ext_local_planner/models/multimodal/multimodal.pt"
    # model_definition_file: "/home/tom/Traversability-Tom/catkin_ws/src/dwa_ext_local_planner/models/resnet18_velocity/resnet18_velocity.pt"

    # Internal calibration matrix
    K: [1067, 0, 943, 0, 1067, 521, 0, 0, 1]

    # Robot to camera translation
    robot_to_cam_translation: [0.084, 0.060, 0.774]

    # Camera tilt angle
    alpha: -0.197

    # Width of the robot
    L: 0.67

    # Width and height of the image
    W: 1920
    H: 1080
    
    # Midpoints of the bins used to discretize the traversal costs
    # (pre-computed on the dataset)
    bins_midpoints: [0.82386684,
                     2.0020273,
                     2.6616611,
                     3.2462296,
                     3.8208783,
                     4.5466967,
                     5.869693,
                     8.807003,
                     13.026296,
                     15.951326]
    # bins_midpoints: [0.43156512,
    #                  0.98983318,
    #                  1.19973744,
    #                  1.35943443,
    #                  1.51740755,
    #                  1.67225206,
    #                  1.80821536,
    #                  1.94262708,
    #                  2.12798895,
    #                  2.6080252]

    # Distance the robot travels within a patch
    patch_distance: 0.5  # [m]

    # Ratio between the width and the height of a rectangle
    rectangle_ratio: 3

    # Maximum number of rectangles to be detected in an image
    nb_rectangles_max: 3

    # Whether to display the trajectories or not
    display_trajectories: false

    # Whether to display absolute or relative cost colors 
    display_absolute_cost: true

    # Maximum and minimum cost values encountered in the training set
    cost_max: 16
    cost_min: 0

    # Radius of the circle in which to look for the neighboring trajectories
    R: 200  # [px]

    # Fixed linear velocity
    # How to interpolate the traversability cost for the remaining trajectories
    interpolation_method: "linear_threshold"  # "max", "linear_threshold"
    # Threshold for the linear interpolation on the angular velocity
    vth_thr: 0.05
